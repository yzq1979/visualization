
充分利用ChatGPT的功能，用于实验教学，使用VS CODE 的扩展 Copilot ，提高项目在线编程实验教学平台的智能程度。

基于GPT-3模型的智能对话系统ChatGPT
在编程实验教学中的应用研究

摘要：编程实验是计算机科学教育中重要的组成部分，但是传统的编程实验教学方式存在一些问题，比如缺乏互动性、反馈不及时、难以激发学生兴趣等。为了改善这些问题，我们开发了一个基于对话系统的编程实验教学平台，利用ChatGPT模型作为对话引擎，与学生进行自然语言交流，帮助他们完成编程任务。ChatGPT模型是一个基于GPT-3模型的对话系统，它可以根据上下文生成合理和有趣的回复，并且能够处理多轮对话、逻辑推理、知识检索等复杂场景。ChatGPT模型在编程实验教学中具有很大的潜力和应用价值，并且希望未来能够进一步完善平台功能和扩大用户群体。


编程实验教学是指通过让学生在计算机上编写和运行代码来学习编程知识和技能的教学方式。编程实验教学有以下几个目标：培养学生的逻辑思维和问题解决能力；增强学生的创造力和自信心；激发学生的兴趣和热情；为学生提供实践和应用的机会；然而，编程实验教学也面临着一些挑战，例如：编程难度较高，容易让学生感到困惑和沮丧；编程反馈不及时，不利于学生及时发现和改正错误；学生基础差异大；编程资源不足，难以满足不同水平和需求的学生；编程教师不够专业或热情，难以引导和激励学生。如何提高编程教学的效率和质量，激发学习者的兴趣和动机，培养学习者的创新能力和批判性思维，是编程教学领域亟待解决的问题。
为了改善编程实验教学质量，许多研究者尝试利用人工智能技术来辅助编程实验教学。其中一种比较流行且有效的方式是使用聊天机器人技术来提供智能化、个性化、互动化的编程指导服务。近年来，随着深度神经网络模型在自然语言生成领域取得突破性进展，基于神经网络模型生成式对话系统（Neural Generative Dialogue System）成为了聊天机器人技术发展中最具潜力且最受关注。ChatGPT是一个由OpenAI训练的基于生成预训练转换器(Generative Pre-Trained Transformer)技术的大型语言模型，具有高度的语言理解能力，可以进行对话、文本生成、问答等多种任务。它使用了Transformer架构，能够从大量语料中学习语言特征。它的主要优势在于可以根据上下文环境进行自然的对话，并且能够提供准确、丰富的回答, 可以与用户进行自然和有趣的交流。ChatGPT可以在编程领域有多种应用，例如代码生成、代码提示、故障诊断、文档生成、自动测试等。ChatGPT可以根据用户的输入和上下文生成合理和连贯的回复，也可以主动提出问题、纠正错误、挑战假设、拒绝不恰当的请求等。





1.	项目研究意义
编程技能已成为当代大学生综合素质的重要组成部分，编程相关课程一直以来都是各高校理工科极其重要的基础课程, 是提高学生实际动手能力和培养创新能力的重要途径。因此，实施编程教学课程的教学改革和创新实践，对于提高专业能力与职业素养至关重要。
优秀的编程教学平台是实施高质量编程教学不可或缺的重要因素，但目前编程教学平台本身不够完善，且很多时候未能很好与编程教学实施相结合，这些直接限制了编程教学水平提升。许多从事编程教学的一线教师，在实施编程课程教学时，采用的教学方式仍然基于各种本地IDE（集成开发环境），此类单机版平台在编程教学中存在如下明显不足: 1.平台针对软件开发设计，并非针对编程教学设计，因此无法提供编程教学设计和实施中所需的诸多功能；2 .缺乏服务器端来实时采集和分析编程过程中的大量数据，很难有针对性地因材施教。
本项目计划在项目团队以往教学经验和技术积累基础上，根据当前最新的技术趋势和行业发展方向，密切结合编程教学需求，探索研发在线编程教学平台和依托平台探讨教学改革实施，努力从根本上解决当前编程教学方式的一些痛点。该平台计划使用部署于云端容器内的多种编译器来编译程序源代码，利用智能、快速、全面的数据分析及可视化呈现来构建以编程学习者为中心的个性化教育环境，探索编程教学课程线上线下结合的教学模式来实现教学质量的持续改进。 

2.	国内外研究状况
目前已有的在线编程平台，一般存在如下不足：1.不支持本地服务器部署模式，校园网出口网络带宽大小容易影响实际教学效果；2.服务器端一般只能给出程序代码执行结果、执行时间等有限的简单数据，无法采集编程教学过程中的各种数据并进行分析呈现； 3.未能综合集成包括代码抄袭检测、自动判题、代码协作、代码规范检查在内的诸多有用的教学辅助功能。

3.	研究基础
项目团队主要成员，均长期从事《程序设计基础实验》、《面向对象程序设计实验》、《程序设计课程项目》等面向计算机学院全院本科生的必修课程教学工作，具有多年丰富的编程教学经验和教学改革研究经历，从课程团队建设、课程体系建设、教学模式等方面进行过比较深入探索和实践，完成了包括《C++程序设计实验教学案例设计与微课资源建设》（广东省教育厅教学改革项目）在内的多项教学改革课题和质量工程项目，近年来陆续发表了多篇编程教学相关的教学改革论文，包括《高校计算机实验室的教学管理信息化实践》、《程序设计类综合设计性实验项目的设计与实施》、《程序设计实验教学的组织与评价探讨》等，这些积累都为本项目中的在线编程教学平台的需求分析和教学改革实践打下了良好基础。
项目组主要成员参与过《云平台大规模迁移部署关键技术研究和示范应用》、《新一代自主可控的云管理平台研发和应用》等大型软件项目的研发和应用工作，在云计算等多个相关技术领域都具有较丰富的技术积累和软件项目开发实践经验，先后组织研制开发了“通用虚拟仿真实验系统”、“基于B/S架构的实验报告在线提交和批改系统”、“B/S架构的在线考试系统”、“C++程序设计实验教学案例资源库”等软件系统并投入内部教学使用，使用效果良好。
项目团队成员已对在线编程教学平台和依托平台的教学改革进行了一些前期研究和探索，作为指导老师负责指导2018年度省级大学生创新创业项目《高并发在线编译系统》；作为指导老师负责指导的2020年度本科毕业论文《面向编程教学的在线IDE系统的设计和实现》获得校级优秀毕业论文；指导计算机学院多名本科同学参加第九届“蓝桥杯”全国软件和信息技术专业人才大赛并获奖，获得全国总决赛优秀指导老师的荣誉证书。
因此，综上所述，项目团队成员在编程教学实施、平台设计实现以及课程教学改革研究方面都具备丰富的经验和足够的技术积累，能够在研发在线编程平台的过程中融入多年教学经验，形成良好的在线编程教学平台生态。

4.	研究方法
项目关键技术的研发采用自主研发与集成相结合方法，继承和完善项目组成员在相关领域的技术成果，采用和集成业界主流工具，针对在线编程教学平台所面临的诸多关键问题展开研究开发。将关键技术划分为云端平台支撑、在线web架构以及大数据智能驱动三大类，齐头推进，项目主要技术路线如图1所示：
项目组成员将按照协同分工的原则，充分利用团队在编程教学、软件开发、教学改革项目研究等方面的优势，实现本项目的顺利实施。



具体研究方法：
（1）	研究基于前端和云端架构的在线平台编程教学平台的总体架构
权衡考虑实现难度、客户端硬件配置、网络带宽、并发访问等多种因素，设计在线编程教学平台的总体框架，尽可能将运行负载放置于云端，降低对客户端硬件配置的需求，便于项目推广使用部署，也有助于构建统一规范化且实验过程可控的在线编程教学平台。
（2）	研究云端基于Docker容器技术和Kubernetes 的容器编排技术
云端采用当前主流的Docker容器技术和Kubernetes 的容器调度编排技术，配置部署方式灵活，既可部署于内部搭建的私有云平台，也可部署于外部的公有云平台。基于docker容器作为程序代码地编译和运行引擎，既能保证主机的安全和隔离，也能提高运行效率，更充分利用现有的硬件资源潜力，从技术架构上保证在同样资源的前提下支持更高数量的并发访问和快速响应。
（3）	研究集成多个编译器或者解释器作为引擎来驱动代码正常运行的机制和实现方法
使用docker容器作为载体，根据用户选择来调用内部集成部署的编译器或解释器来运行程序源代码，支持包括C、C++、Java、python、javascript在内的各种常见编程语言的教学需求。Docker容器的轻量级，可保证在多种编程语言和多个编译器之间的无缝快速切换。模块化的架构设计，能够方便地添加新编程语言的支持，只需要将对应的编译器或者解释器按照规范集成到云端平台。
（4）	研究前端实现完善的代码编辑、编译和调试功能操作的方法
用户在前端通过浏览器访问在线编程教学平台的各项功能。目前在线下编程开发中，微软公司推出的VS Code由于具有跨平台、轻量级、扩展丰富、生态系统完善等突出优点，目前逐渐占据了越来越多的市场份额。为了使得用户在线编程能够和线下编程无缝衔接，并且考虑到本平台的需求特点，平台计划采用集成第三方开源的web化VS CODE的技术方案来实现所需的代码编辑、编译和调试等编程相关基本功能。平台基于最新的前端组件化框架基础进行开发，力争使得用户体验和反应速度接近于在本地桌面客户端上操作。
（5）	研究常用编程教学辅助功能需求实现和集成方法
教学辅助功能研发和集成，主要包含实验报告提交与评阅、代码抄袭检测、自动判题、代码协作、代码规范检查等实用功能，便于教师更好地实施编程教学。比如在线协作编程功能能够很好地提高学生编程的积极性；代码抄袭识别功能方便教师做好教学过程监控和管理。
（6）	研究编程教学过程大量数据的全面采集、智能分析和可视化展示
系统自动采集的数据，用来自动全面实时分析学习者的编程情况和特点，便于编程教师定量地具体掌握每位学习者的学习情况以及知识能力水平，也可用于用户编程过程中的实时智能反馈。数据全面采集和可视化统计分析，为进行大数据分析以及智能教学提供良好基础。丰富强大的统计分析和可视化展示功能，便于教师实时查看学生练习情况，进行学习行为分析，调整教学方式，按需提供实验指导，实现个性化教学。




项目实施分三个阶段：
1）设计阶段：项目组成员收集整理相关资料，深入分析本项目中的在线编程教学平台的需求，按照技术路线进行系统架构设计。
2）研发实现阶段：根据设计思路，突破关键技术，编程实现并进行测试，最终完成平台的研制开发。
3）应用推广期：将平台应用于多门编程相关课程的教学改革实践，在过程中作好情况跟踪、信息收集、意见反馈，根据反馈意见不断改进平台功能，进一步推广应用。
具体实施计划
2021.01-2021.03： 广泛收集查询资料，通过调研、文献检索等方法，收集在线编程教学平台的需求，了解国内外较成熟的在线编程教学网站的功能和技术特点；
2021.04-2022.02：验证和完善相关技术，研制开发在线编程教学平台，撰写设计文档、使用说明、研究报告和教学改革论文；
    2022.03-2022.06：项目团队成员进行测试和课堂使用，并依托该平台开展编程教学相关课程的教学改革；
    2022.07-2022.08：根据反馈意见，修改完善在线编程教学平台设计和实现； 
2022.09-2022.10：进一步修改完善设计文档、使用说明和研究报告，进一步推广课堂使用。
     2022.11-2022.12： 准备项目验收相关材料。

6.	预期成果
本项目将立足于在线编程教学的实际需要，研制开发一个在线编程教学平台，使之具有很好的通用性和良好的推广应用潜力，并将其实践应用于本学院多门编程相关实验课程的教学改革，以持续提升计算机学院人才培养质量，对计算机学院和学校其它相关学院开展工程教育专业认证，起到较好的推动和示范作用。
后续计划根据师生教学反馈，从平台技术、运行平台以及运维管理等方面进一步修改完善，对外开放共享，面向全省和全国实施编程教学的各类学校、培训机构和公司企业以及编程自学者进行推广。

7.	成果形式
项目研究报告一份；在线编程教学平台源代码一套、相关设计文档和使用说明书一套以及演示网站一个；软件著作权一项。


编程相关课程一直以来都是各高校理工科极其重要的基础课程, 是提高学生实际动手能力和培养创新能力的重要途径。近年来，随着人工智能的快速发展和日益广泛应用，编程技能已成为当代大学生综合素质的重要组成部分。正是在这种趋势下，国务院印发的《新一代人工智能发展规划》（（国发2017）35号）中明确提出：实施全民智能教育项目，在中小学阶段设置人工智能相关课程，逐步推广编程教学，鼓励社会力量参与寓教于乐的编程教学软件、游戏的开发和推广。此外，2017年底，浙江新高考已经明确将信息技术学科（含编程）纳入高考的考试科目，而北京、山东等教育大省也紧随其后。可见，在新形势下，实施编程教学类课程的教学改革和创新实践，提高专业能力与职业素养，对于培养高素质的人才至关重要。
优秀的编程教学平台是提供优良的编程教学不可或缺的重要因素，但目前现状是，编程教学平台的缺失和不完善已经严重阻碍了编程教学水平提升。相当一部分从事编程教学的一线教师，在实施编程类的课程教学的时候，仍然采用传统的基于本地IDE（集成开发环境）作为主要的编程教学平台工具进行教学，此类单机版平台在编程教学中存在如下明显不足: 1.平台针对软件开发设计，并非针对编程教学设计，因此无法提供编程教学教学设计和实施中所需的诸多功能；2 .没有服务器端来实时采集和分析编程过程中的大量数据以有针对性地因材施教。部分教师尝试在编程教学中引入的一些在线编程平台，也存在如下不足：1.不支持本地服务器部署模式，受对外网络带宽影响较大，影响教学效果；2.服务器端一般只能简单给出程序代码的执行结果和执行时间等有限数据，不能给出更多有参考意义的实时分析数据；3.支持的编程语言和编译器有限，不能满足学习多种编程语言和使用多个编译器编译同一份程序代码的常见需求；4.缺乏诸多教学辅助功能，如代码抄袭检测、自动判题、代码协作、代码规范检查等。
本项目申请的《云端大数据驱动的智能在线编程教学平台研制开发和教学改革实践》，则是计划在项目团队以往的教学经验和技术积累基础上，根据当前最新的技术趋势和行业发展方向，密切结合编程教学的需求，探索研发在线编程教学平台，努力从根本上解决当前编程教学方式的一些痛点。开发新型在线学习教育平台，利用云端部署的容器化多种编译器来驱动程序代码运行，利用智能、快速、全面的数据分析及可视化呈现来构建以编程学习者为中心的个性化教育环境，交互式学习。探索编程教学类课程线上线下结合模式和过程控制机制，实现教学模式和教学质量的持续改进。
工程教育认证要求提高学生解决复杂工程问题的能力，建立课程质量跟踪评价机制，实现课程教学质量的可持续性改进，将解决问题能力培养，贯穿到教学全课程。利用本项目研究的在线编程教学平台，可开展基于互联网的混合教学支撑环境与方法研究和翻转课堂、研究性学习等新型学习方式的研究，进行创新思维训练和创新能力培养实践。
    项目负责人和项目团队其他成员已在《程序设计基础实验》、《面向对象程序设计实验》、《程序设计课程项目》等多门课程教学中对在线编程教学平台进行了一些前期研究和初步实践，取得了预期的创新教学效果，期待能在本项目中更深入地研究、实践和推广。



1.具体改革内容、改革目标和拟解决的关键问题
具体改革内容：
（1）	研究基于前端和云端架构的在线平台编程教学平台的总体架构；
权衡考虑实现难度、客户端硬件配置、网络带宽、并发访问等多种因素，设计在线编程教学平台的总体框架，尽可能将运行负载放置于云端，降低对客户端硬件配置的需求，便于项目推广使用部署。
（2）	研究云端基于docker容器技术和Kubernetes 的容器编排技术；
云端采用当前最新主流docker容器技术和Kubernetes 的容器编排技术，部署方式灵活，既可部署于内部自行搭建的私有云平台，也可部署于外部的公有云平台，并且技术架构上保证了能够更容易支持高并发访问。 
（3）	研究集成多个编译器或者解释器作为引擎来驱动代码正常运行的机制和实现方法；
使用docker容器作为载体，根据用户选择来调用内部集成部署的编译器和解释器来运行程序代码，支持常见的包括C++、Java、python、javascript在内的各种编程语言的教学需求。
（4）	研究前端实现完善的代码编辑、编译和调试功能操作的方法；
用户在前端通过浏览器访问在线编程教学平台的各项功能，在先进的前端组件化框架基础上开发，使得用户体验和反应速度类似于在本地桌面客户端上操作。
（5）	研究编程教学过程大量数据的采集、分析和展示方法；
系统自动采集的数据，用来自动全面实时分析学习者的编程情况和特点，便于编程教师定量地具体掌握每位学习者的学习情况，以及知识和能力水平。
（6）	研究常用的编程教学辅助功能需求实现和集成方法。
主要包含代码抄袭检测、自动判题、代码协作、代码规范检查等实用功能，便于教师更好地实施编程教学。

改革目标：
（1）	开发高并发、快速响应的在线编程教学平台；
（2）	支持多种编程语言和多个编译器之间的无缝快速切换；
（3）	具备完善的对编程教学过程的数据全面采集、智能分析和可视化展示；
（4）	设计与集成实现丰富的编程教学相关辅助功能。
拟解决的关键问题：
（1）	容器云平台的配置和容器调度以及调用方式；
（2）	多种编程语言的编译器或解释器的容器化集成；
（3）	编程过程数据的全面采集、智能分析和可视化展示方法；
（4）	相关教学辅助功能的设计与集成实现方法；
（5）	用户编程过程的智能反馈设计与实现方法。
2.实施方案、实施方法、具体实施计划（含年度进展情况）及可行性分析
实施方案：
项目关键技术的研发采用自主与集成研发相结合方法，继承和完善项目组成员在相关领域的技术成果，采用和集成业界主流工具，针对云端多引擎驱动的在线编程教学平台所面临的诸多关键问题展开研究开发。将关键技术划分为云端平台支撑、在线web架构以及大数据智能驱动三大类，齐头推进，项目主要技术路线如图1所示：
项目组成员将按照协同分工的原则，充分利用团队在编程教学、软件开发、教学改革项目研究等方面的优势，采用软件工程的方法，实现本教学改革项目的顺利实施。
 
图1  项目主要技术路线图
实施方法：
项目实施分三个阶段：
1）设计阶段：项目组成员收集整理相关资料，深入分析本项目中的在线编程教学平台的需求，按照技术路线进行系统架构设计。
2）研发实现阶段：根据设计思路，突破关键技术，编程实现并进行测试，最终给出有效的整套解决方案。
3）应用推广期：结合平台功能，选取合适的编程相关课程进行试用，试用过程中作好情况跟踪、信息收集、意见反馈。根据反馈的意见，进行新需求研究，改进和完善解决方案扩大试用覆盖面。
具体实施计划
2021.01-2021.03： 广泛收集查询资料，通过调研、文献检索等方法，收集在线编程教学平台的需求，深入了解国内外较成熟的在线编程网站的技术特点和实现；
2021.04-2022.04：验证和完善相关技术，开发在线编程教学平台，撰写设计文档、使用说明、研究报告和教学改革论文，总结项目实践经验；
    2022.05-2022.06：项目团队成员进行测试和小规模课堂试用；
    2022.07-2022.08：根据反馈意见，修改完善在线编程教学平台的设计和实现， 
2022.09-2022.10：进一步修改完善设计文档、使用说明和研究报告，推广进行较大规模的课堂使用。
     2022.11-2022.12： 准备项目验收相关材料。 
可行性分析：
项目团队成员，是学院本科课程主要教学力量之一，均为学院长期从事本科编程教学一线教师，具有多年丰富的编程教学经验和教学研究经历，了解编程教学的实际需求，先后从课程团队建设，课程体系建设，教学模式等方面深入开展探索和实践，并取得了显著成果。先后发表了多篇关于编程教学的教学改革论文，并且先后承担了多项教改课题和质量工程项目，并且已经在近年来的专业课程教学中对在线编程教学平台进行了前期研究和初步实践，取得了预期的创新教学效果，期待能在本项目中更深入地研究、实践和推广。
同时，项目组的成员均承担过实际软件项目，具有丰富的软件项目组织和开发实践经验，与本项目相关的已完成研制开发的前期项目有：“通用虚拟仿真实验系统”、“基于B/S架构的在线考试系统”，“实验报告在线提交和批改系统”、“高并发在线编译系统”、“C++程序设计实验教学案例设计与资源库建设”等，并且经多届学生使用，反馈良好。
此次申报课题是项目团队适应学校人才培养模式创新大局，紧跟人工智能时代编程人才培养要求，由从事编程教学的一线教师亲自研究开发的编程教学平台，融入多年教学经验，通过试用和修改完善并推广，将会形成良好的编程教学平台生态。
因此，综上所述，项目团队成员编程教学实施、平台设计实现以及专业课程教学改革研究方面都具备丰富的经验和足够的技术积累，开展本项目的研究是可行的。



本项目研究的开展和实践应用于学院多门编程相关课程，将持续提升计算机学院以及全校本科生的人才培养质量，对计算机学院和学校开展工程教育专业认证，也将起到很好的推动和示范作用。本项目成果本身具有很好的通用性和极好的推广应用潜力，根据师生教学反馈进行修改完善后，可在学校各相关院系进行推广，后续再从平台技术、运行环境以及管理制度等方面进一步完善，并对外开放共享，面向全省和全国进行推广。项目成果可广泛应用于实施编程教学的各类学校、培训机构和公司企业以及编程自学者，用途广泛，受益面广。


本项目的特色与创新点
特色：
（1）	基于docker容器作为程序代码地编译和运行引擎，既能保证主机的安全和隔离，也能提高运行效率，在同样资源的前提下，支持更高数量的并发访问；
（2）	模块化的架构设计，能够方便地添加新的编程语言的支持，只需要将对应的编译器或者解释器按照规范集成到云端平台。
（3）	融入教学设计的辅助功能设计，比如在线协作编程功能能够很好地提高学生编程的积极性；代码抄袭识别功能方便教师做好教学过程监控和管理。
（4）	丰富强大的统计分析和可视化展示功能，便于教师实时查看学生练习情况，进行学习行为分析，调整教学方式，按需提供实验指导，实现个性化教学。
（5）	用户编程过程中的实时智能反馈。
创新点：
（1）	容器云技术的引入，能够更充分利用现有的硬件资源潜力支持高并发；
（2）	将多种编程语言的编译器或者解释器集成于同一平台，便于编程学习者学习和选择使用多种编程语言，以及比对不同编译器的编译结果来辅助调试程序；
（3）	数据全面采集和可视化统计分析，为进行大数据分析以及智能教学提供良好的基础；
（4）	教学设计贯穿始终，使得项目比普通在线编程平台更适合于开展编程教学。有利于整合线上与线下教学模式，优化培养途径，实现教学过程的持续改进和教学目标的全面实现，实现项目的实践创新；
（5）	统一规范化且实验进度可控的教学平台。



与本项目有关的工作积累和已取得的工作成绩
项目负责人与项目相关的工作积累主要有：
项目负责人长期从事《程序设计基础实验》、《面向对象程序设计实验》、《程序设计课程项目》等面向计算机学院全院本科生的必修课程的教学工作，具有较丰富的编程教学经验；先后负责多项软件开发工作和作为主要参加人参与重大软件项目的研发，在软件工程、云计算等多个技术领域都具有较丰富的技术积累；近年来陆续在国内外期刊会议上程序设计和编程开发领域发表了与多篇教学改革论文和科研论文，这些积累都为本项目中的在线编程教学平台的研究顺利开展打下了良好的基础。



项目负责人与项目相关的工作成绩主要有：
作为主要参与人先后参与《云平台大规模迁移部署关键技术研究和示范应用》（2015年度省前沿与关键技术创新重大科技专项）、《新一代自主可控的云管理平台研发和应用》（2016年度省前沿与关键技术创新重大科技专项）的研究工作；	
在国际会议上发表了2篇软件开发相关的研究论文，《Performance Promotion of Software Development Team in Different Organizational Structures》（IEEE ICSDDP 2011）、《Close Cooperation Between Colleges and Enterprises: a Pattern of Software Engineering Talent Cultivation》（IEEE ICSDDP 2011）。
先后在国内外期刊公开发表4篇实验教学论文，包括《高校实验室软件正版化问题的探讨》（广东省高等教育学会实验室管理专业委员会2009学术年会优秀论文）、《高校计算机实验室的教学管理信息化实践》、《程序设计类综合设计性实验项目的设计与实施》、《程序设计实验教学的组织与评价探讨》。
作为指导老师负责指导2018年度省级大学生创新创业项目《高并发在线编译系统》。
作为指导老师负责指导的2020年度本科毕业论文《面向编程教学的在线IDE系统的设计和实现》获得校级优秀毕业论文。
指导计算机学院多名本科同学参加第九届蓝桥杯全国软件和信息技术专业人才大赛并获奖，获得全国总决赛优秀指导老师的荣誉证书。
设计“基于控制台的计算器模拟”、“简单生态仿真系统”2个综合型、设计型实验并获得校立项。
先后组织研制开发了“通用虚拟仿真实验系统”、“基于B/S架构的实验报告在线提交和批改系统”、“B/S架构的在线考试系统”、“高并发在线编译系统”等软件并投入内部使用。



学校一直高度重视本科人才培养质量的全面提升，大力提倡实验教学的改革，鼓励一线教师进行教学改革和探索，并通过国家级、省级和校级教学改革项目和质量工程项目等形式持续提供经费支持和条件保障，经费使用、项目管理等方面都形成了一系列规范良好的机制，这些都为本项目顺利开展和取得理论和实践成果奠定了良好的基础。








智能在线编程教学系统作为开展计算机科学在线教学实践活动的辅助平台，设计实现了Web IDE与课堂教学相关功能，实现了编程实践训练与教学活动管理功能，为师生提供实践教学活动开展的平台。项目实施以来，项目组成员 先后研制开发了在线编程教学平台1.0版本（源代码参见佐证材料1）和2.0版本（源代码参见佐证材料2）。其中，1.0版本主要具有如下功能特性：
1.用户可以在任意主机的浏览器上通过网页直接访问系统，并使用在线IDE进行编程，即开即用，不需要额外进行编程环境的配置；
2.设计和实现了用户以及课程两大功能模块，提供了课程、班级、实验管理等功能，使得教师能将线上教学与线下教学很好地结合；
3.提供了许多如课程签到、课程问答平台、课程资源等互动功能，教师能更好地跟进学生的学习情况，提升教学效率；
4.后端基于 Go 语言开发，使用容器化的方式部署，运行内存占用低，性能较高；
5.实现了相关辅助功能，例如在线查看代码、代码查重和编译错误日志等。
在1.0版本的基础上，项目组仔细分析了1.0版本在项目组织结构、路由存储请求管理、组件组织与组件编码上存在的问题，以及这些问题对系统可读性、稳定性、可复用性与可维护性的影响。在分析基础上，遵循开放封闭、单一职责、依赖倒装等原则，提高系统可维护性与可复用性，适应功能迭代开放环境，对系统的设计与实现进行了重构，侧重在对象安全、代码复用、抽象拓展、开发质量等方面的优化，最后研制开发完成了在线编程教学平台2.0版本，主要在以下几方面有明显的改进效果：
1.提升服务器的数据安全性
（1）将系统中的service层就会将错误封装隐藏，定义成ErrIsNotFound、ErrFailToAuth等Error类型后再返回于API层，系统在API层就可以根据收到错误的不同向前端发送不同的HTTP状态码与自定义错误码。
（2）现有系统所有用户的登录状态信息都设置了相应的过期时间，并具备着一套较为成熟的登录会话状态延长机制。
（3）在完成RABC权限模型的基本任务上进行粒度更小的权限划分，确保每个API接口都应是安全的。
（4）自行搭建代码查重模块，用户查看查重报告时，系统会对访问用户进行充分的鉴权工作。
2. 提升IO密集型场景下数据查询性能
（1）进行权限校验时基本避免在关系型数据库进行多表复杂查询，相比之下性能是高出不少的。
（2）充分利用了Go语言中的Goroutine、Channel等组件，实现了并发任务的自动调度，并大规模运用于IO密集型场景中，以充分发挥出系统的性能。
（3）根据具体业务场景建立一定的普通索引或唯一索引，从而在数据量较大的时候优化数据查询速度。
3 全方位提升后端服务的稳定性
（1）系统则为每个HTTP请求都限定了超时时间，即实现了超时控制，以防止大量超时请求无法及时释放而对后端服务造成破坏。
（2）系统中的查重模块是使用了开源模块进行二次开发后自行搭建而成的，具备较好的稳定性与可用性。
（3）系统则在Theia提供的Docker镜像基础上，进行了一定的优化工作，最好情况下运行内存能节省一半左右。
（4）系统则将IDE模块整个包装成了一个微服务，并部署于容器中。用户使用的单个容器受到限制的同时，IDE模块也会被整体限制，从而可以保护宿主机中CPU、内存等资源。
（5）现有系统中的Token会保存在Redis与MySQL中。其中存放用户Token的Redis实例并不是系统中其他功能依赖的Redis实例，而是单独的一个实例。它具备最大内存限制，同时配备了LRU的Token淘汰算法。现有系统能利用好Redis高效读取性能的同时，也能防止Redis实例内存占用的无限增大，从而起到了保护系统服务的作用。
（6）系统为Redis引入了数据丢失概率更小的APPEND ONLY的持久化机制，并且引入了稳定性表现更强的MySQL帮助存储用户登录状态信息。
（7）系统在多机部署IDE模块时引入了GlusterFS的复制卷功能，从而有效避免单点故障问题。
4 降低模块之间的耦合度与提高系统可扩展性
（1）采用了一些与Go语言标准库兼容性表现很好的轻量级组件完成指定功能，不存在过度封装的问题，具备着良好的扩展性。
（2）现有系统的IDE模块直接被打包成了一个Docker镜像，与其他服务之间通过RPC接口进行通信，是完全解耦合的。届时IDE模块就可以方便地单独部署于多台内存充足的机器中。
5 改善系统的可维护性
（1）使用中间件技术，利用一批自定义定制的中间件进行API权限控制，且中间件是采用了可插拔的方式，可以根据每个API接口进行不同的权限控制。开发人员只需要查看接口注册的相关代码就能直接知道该接口允许哪类用户访问。
（2）接入了Docker  Compose以完成系统多个服务的一键部署。同时也实现了部分微服务镜像的自动打包与部署，从而大大提高开发效率。
（3）利用了Uber公司开源的zap日志框架，在系统的service层仔细记录下Debug或Error级别的日志。当出现Bug时，开发者就可以快速定位系统的问题。
（4）编写了大量的单元测试代码，并尽可能覆盖代码执行的所有情况。在之后对系统功能修改或进行进一步重构时，都可以利用到其中的单元测试代码一键完成测试。
6 补充了原型系统缺失的部分功能
（1）原型系统的核心功能在线编程过度依赖于IDE模块；现有系统则进一步开发出了轻量级的在线代码运行模块，届时用户可以通过IDE模块与在线代码运行模块两种方式进行在线编程。
（2）原型系统不存在管理员用户角色；现有系统则在此基础上进行管理员相关API接口的开发，提供自动分发账号、批量导入学生名单、用户管理、课程管理、IDE容器管理等功能。



1.	进一步优化软件功能代码，提高系统的性能和稳定性；
2.	研究系统部署于本地服务器集群环境下的方法和相应技术措施，保障系统在高并发访问情况下的可用性；
3.	对系统进行进一步的测试；
4.	在实验教学中进行试用，根据师生教学反馈平台技术、运行平台以及运维管理等方面进一步对系统进行修改，经过若干次迭代，完善系统的功能，促进程序设计相关的实验课程的教学改革；
5.	继续撰写和完善系统的相关设计文档和研究总结；
6.	申请软件著作权。



